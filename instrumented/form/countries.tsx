function cov_ijulxtcoz() {
  const path =
    'C:\\react\\first\\helgaathame-JSFE2022Q3\\react.component\\src\\form\\countries.tsx';
  const hash = '6aefd580137c0a4631af1c01ae8e136d0ee41b4b';
  const global = new Function('return this')();
  const gcv = '__coverage__';
  const coverageData = {
    path: 'C:\\react\\first\\helgaathame-JSFE2022Q3\\react.component\\src\\form\\countries.tsx',
    statementMap: {
      '0': {
        start: {
          line: 1,
          column: 25,
        },
        end: {
          line: 138,
          column: 1,
        },
      },
    },
    fnMap: {},
    branchMap: {},
    s: {
      '0': 0,
    },
    f: {},
    b: {},
    _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
    hash: '6aefd580137c0a4631af1c01ae8e136d0ee41b4b',
  };
  const coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  const actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ijulxtcoz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ijulxtcoz();
export const countries =
  (cov_ijulxtcoz().s[0]++,
  [
    'Abkhazia',
    'Australia',
    'Austria',
    'Azerbaijan',
    'Albania',
    'Algeria',
    'Andorra',
    'Antarctica',
    'Argentina',
    'Armenia',
    'Afghanistan',
    'Bahamas',
    'Bangladesh',
    'Belarus',
    'Belgium',
    'Bermuda',
    'Bulgaria',
    'Bolivia',
    'Bosnia and Herzegovina',
    'Brazil',
    'Hungary',
    'Venezuela',
    'Vietnam',
    'Haiti',
    'Guatemala',
    'Guinea',
    'Germany',
    'Hong Kong',
    'Greenland',
    'Greece',
    'Georgia',
    'Denmark',
    'Dominican Republic',
    'Egypt',
    'Zimbabwe',
    'Israel',
    'India',
    'Indonesia',
    'Jordan',
    'Iraq',
    'Iran',
    'Ireland',
    'Iceland',
    'Spain',
    'Italy',
    'Kazakhstan',
    'Canada',
    'Kenya',
    'Cyprus',
    'Kyrgyzstan',
    'China',
    'Colombia',
    'Korea',
    'Republic of Korea',
    'Cuba',
    'Kuwait',
    'Lao',
    'Latvia',
    'Lebanon',
    'Liechtenstein',
    'Lithuania',
    'Luxembourg',
    'Mauritius',
    'Madagascar',
    'Maldives',
    'Malta',
    'Morocco',
    'Mexico',
    'Moldova',
    'Monaco',
    'Mongolia',
    'Namibia',
    'Nepal',
    'Niger',
    'Nigeria',
    'Netherlands',
    'Nicaragua',
    'New Zealand',
    'Norway',
    'United Arab Emirates',
    'Norfolk Island',
    'Pakistan',
    'Holy See (Vatican City State)',
    'Papua New Guinea',
    'Paraguay',
    'Peru',
    'Poland',
    'Portugal',
    'Puerto Rico',
    'Macedonia',
    'Russian Federation',
    'Romania',
    'San Marino',
    'Saudi Arabia',
    'Serbia',
    'Seychelles',
    'Singapore',
    'Syrian Arab Republic',
    'Slovakia',
    'Slovenia',
    'United Kingdom',
    'United States',
    'Somalia',
    'Sudan',
    'Sierra Leone',
    'Tajikistan',
    'Thailand',
    'Taiwan',
    'Tanzania',
    'Tunisia',
    'Turkmenistan',
    'Turkey',
    'Uganda',
    'Uzbekistan',
    'Ukraine',
    'Uruguay',
    'Fiji',
    'Philippines',
    'Finland',
    'Falkland Islands (Malvinas)',
    'France',
    'Croatia',
    'Central African Republic',
    'Chad',
    'Montenegro',
    'Czech Republic',
    'Chile',
    'Switzerland',
    'Sweden',
    'Sri Lanka',
    'Ecuador',
    'Estonia',
    'Ethiopia',
    'South Africa',
    'Jamaica',
    'Japan',
  ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfaWp1bHh0Y296IiwiYWN0dWFsQ292ZXJhZ2UiLCJjb3VudHJpZXMiLCJzIl0sInNvdXJjZXMiOlsiY291bnRyaWVzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgY291bnRyaWVzID0gW1xyXG4gICdBYmtoYXppYScsXHJcbiAgJ0F1c3RyYWxpYScsXHJcbiAgJ0F1c3RyaWEnLFxyXG4gICdBemVyYmFpamFuJyxcclxuICAnQWxiYW5pYScsXHJcbiAgJ0FsZ2VyaWEnLFxyXG4gICdBbmRvcnJhJyxcclxuICAnQW50YXJjdGljYScsXHJcbiAgJ0FyZ2VudGluYScsXHJcbiAgJ0FybWVuaWEnLFxyXG4gICdBZmdoYW5pc3RhbicsXHJcbiAgJ0JhaGFtYXMnLFxyXG4gICdCYW5nbGFkZXNoJyxcclxuICAnQmVsYXJ1cycsXHJcbiAgJ0JlbGdpdW0nLFxyXG4gICdCZXJtdWRhJyxcclxuICAnQnVsZ2FyaWEnLFxyXG4gICdCb2xpdmlhJyxcclxuICAnQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYScsXHJcbiAgJ0JyYXppbCcsXHJcbiAgJ0h1bmdhcnknLFxyXG4gICdWZW5lenVlbGEnLFxyXG4gICdWaWV0bmFtJyxcclxuICAnSGFpdGknLFxyXG4gICdHdWF0ZW1hbGEnLFxyXG4gICdHdWluZWEnLFxyXG4gICdHZXJtYW55JyxcclxuICAnSG9uZyBLb25nJyxcclxuICAnR3JlZW5sYW5kJyxcclxuICAnR3JlZWNlJyxcclxuICAnR2VvcmdpYScsXHJcbiAgJ0Rlbm1hcmsnLFxyXG4gICdEb21pbmljYW4gUmVwdWJsaWMnLFxyXG4gICdFZ3lwdCcsXHJcbiAgJ1ppbWJhYndlJyxcclxuICAnSXNyYWVsJyxcclxuICAnSW5kaWEnLFxyXG4gICdJbmRvbmVzaWEnLFxyXG4gICdKb3JkYW4nLFxyXG4gICdJcmFxJyxcclxuICAnSXJhbicsXHJcbiAgJ0lyZWxhbmQnLFxyXG4gICdJY2VsYW5kJyxcclxuICAnU3BhaW4nLFxyXG4gICdJdGFseScsXHJcbiAgJ0themFraHN0YW4nLFxyXG4gICdDYW5hZGEnLFxyXG4gICdLZW55YScsXHJcbiAgJ0N5cHJ1cycsXHJcbiAgJ0t5cmd5enN0YW4nLFxyXG4gICdDaGluYScsXHJcbiAgJ0NvbG9tYmlhJyxcclxuICAnS29yZWEnLFxyXG4gICdSZXB1YmxpYyBvZiBLb3JlYScsXHJcbiAgJ0N1YmEnLFxyXG4gICdLdXdhaXQnLFxyXG4gICdMYW8nLFxyXG4gICdMYXR2aWEnLFxyXG4gICdMZWJhbm9uJyxcclxuICAnTGllY2h0ZW5zdGVpbicsXHJcbiAgJ0xpdGh1YW5pYScsXHJcbiAgJ0x1eGVtYm91cmcnLFxyXG4gICdNYXVyaXRpdXMnLFxyXG4gICdNYWRhZ2FzY2FyJyxcclxuICAnTWFsZGl2ZXMnLFxyXG4gICdNYWx0YScsXHJcbiAgJ01vcm9jY28nLFxyXG4gICdNZXhpY28nLFxyXG4gICdNb2xkb3ZhJyxcclxuICAnTW9uYWNvJyxcclxuICAnTW9uZ29saWEnLFxyXG4gICdOYW1pYmlhJyxcclxuICAnTmVwYWwnLFxyXG4gICdOaWdlcicsXHJcbiAgJ05pZ2VyaWEnLFxyXG4gICdOZXRoZXJsYW5kcycsXHJcbiAgJ05pY2FyYWd1YScsXHJcbiAgJ05ldyBaZWFsYW5kJyxcclxuICAnTm9yd2F5JyxcclxuICAnVW5pdGVkIEFyYWIgRW1pcmF0ZXMnLFxyXG4gICdOb3Jmb2xrIElzbGFuZCcsXHJcbiAgJ1Bha2lzdGFuJyxcclxuICAnSG9seSBTZWUgKFZhdGljYW4gQ2l0eSBTdGF0ZSknLFxyXG4gICdQYXB1YSBOZXcgR3VpbmVhJyxcclxuICAnUGFyYWd1YXknLFxyXG4gICdQZXJ1JyxcclxuICAnUG9sYW5kJyxcclxuICAnUG9ydHVnYWwnLFxyXG4gICdQdWVydG8gUmljbycsXHJcbiAgJ01hY2Vkb25pYScsXHJcbiAgJ1J1c3NpYW4gRmVkZXJhdGlvbicsXHJcbiAgJ1JvbWFuaWEnLFxyXG4gICdTYW4gTWFyaW5vJyxcclxuICAnU2F1ZGkgQXJhYmlhJyxcclxuICAnU2VyYmlhJyxcclxuICAnU2V5Y2hlbGxlcycsXHJcbiAgJ1NpbmdhcG9yZScsXHJcbiAgJ1N5cmlhbiBBcmFiIFJlcHVibGljJyxcclxuICAnU2xvdmFraWEnLFxyXG4gICdTbG92ZW5pYScsXHJcbiAgJ1VuaXRlZCBLaW5nZG9tJyxcclxuICAnVW5pdGVkIFN0YXRlcycsXHJcbiAgJ1NvbWFsaWEnLFxyXG4gICdTdWRhbicsXHJcbiAgJ1NpZXJyYSBMZW9uZScsXHJcbiAgJ1RhamlraXN0YW4nLFxyXG4gICdUaGFpbGFuZCcsXHJcbiAgJ1RhaXdhbicsXHJcbiAgJ1RhbnphbmlhJyxcclxuICAnVHVuaXNpYScsXHJcbiAgJ1R1cmttZW5pc3RhbicsXHJcbiAgJ1R1cmtleScsXHJcbiAgJ1VnYW5kYScsXHJcbiAgJ1V6YmVraXN0YW4nLFxyXG4gICdVa3JhaW5lJyxcclxuICAnVXJ1Z3VheScsXHJcbiAgJ0ZpamknLFxyXG4gICdQaGlsaXBwaW5lcycsXHJcbiAgJ0ZpbmxhbmQnLFxyXG4gICdGYWxrbGFuZCBJc2xhbmRzIChNYWx2aW5hcyknLFxyXG4gICdGcmFuY2UnLFxyXG4gICdDcm9hdGlhJyxcclxuICAnQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljJyxcclxuICAnQ2hhZCcsXHJcbiAgJ01vbnRlbmVncm8nLFxyXG4gICdDemVjaCBSZXB1YmxpYycsXHJcbiAgJ0NoaWxlJyxcclxuICAnU3dpdHplcmxhbmQnLFxyXG4gICdTd2VkZW4nLFxyXG4gICdTcmkgTGFua2EnLFxyXG4gICdFY3VhZG9yJyxcclxuICAnRXN0b25pYScsXHJcbiAgJ0V0aGlvcGlhJyxcclxuICAnU291dGggQWZyaWNhJyxcclxuICAnSmFtYWljYScsXHJcbiAgJ0phcGFuJyxcclxuXTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7QUFmWixPQUFPLE1BQU1FLFNBQVMsSUFBQUYsYUFBQSxHQUFBRyxDQUFBLE9BQUcsQ0FDdkIsVUFBVSxFQUNWLFdBQVcsRUFDWCxTQUFTLEVBQ1QsWUFBWSxFQUNaLFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsU0FBUyxFQUNULGFBQWEsRUFDYixTQUFTLEVBQ1QsWUFBWSxFQUNaLFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixTQUFTLEVBQ1Qsd0JBQXdCLEVBQ3hCLFFBQVEsRUFDUixTQUFTLEVBQ1QsV0FBVyxFQUNYLFNBQVMsRUFDVCxPQUFPLEVBQ1AsV0FBVyxFQUNYLFFBQVEsRUFDUixTQUFTLEVBQ1QsV0FBVyxFQUNYLFdBQVcsRUFDWCxRQUFRLEVBQ1IsU0FBUyxFQUNULFNBQVMsRUFDVCxvQkFBb0IsRUFDcEIsT0FBTyxFQUNQLFVBQVUsRUFDVixRQUFRLEVBQ1IsT0FBTyxFQUNQLFdBQVcsRUFDWCxRQUFRLEVBQ1IsTUFBTSxFQUNOLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNULE9BQU8sRUFDUCxPQUFPLEVBQ1AsWUFBWSxFQUNaLFFBQVEsRUFDUixPQUFPLEVBQ1AsUUFBUSxFQUNSLFlBQVksRUFDWixPQUFPLEVBQ1AsVUFBVSxFQUNWLE9BQU8sRUFDUCxtQkFBbUIsRUFDbkIsTUFBTSxFQUNOLFFBQVEsRUFDUixLQUFLLEVBQ0wsUUFBUSxFQUNSLFNBQVMsRUFDVCxlQUFlLEVBQ2YsV0FBVyxFQUNYLFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLFVBQVUsRUFDVixPQUFPLEVBQ1AsU0FBUyxFQUNULFFBQVEsRUFDUixTQUFTLEVBQ1QsUUFBUSxFQUNSLFVBQVUsRUFDVixTQUFTLEVBQ1QsT0FBTyxFQUNQLE9BQU8sRUFDUCxTQUFTLEVBQ1QsYUFBYSxFQUNiLFdBQVcsRUFDWCxhQUFhLEVBQ2IsUUFBUSxFQUNSLHNCQUFzQixFQUN0QixnQkFBZ0IsRUFDaEIsVUFBVSxFQUNWLCtCQUErQixFQUMvQixrQkFBa0IsRUFDbEIsVUFBVSxFQUNWLE1BQU0sRUFDTixRQUFRLEVBQ1IsVUFBVSxFQUNWLGFBQWEsRUFDYixXQUFXLEVBQ1gsb0JBQW9CLEVBQ3BCLFNBQVMsRUFDVCxZQUFZLEVBQ1osY0FBYyxFQUNkLFFBQVEsRUFDUixZQUFZLEVBQ1osV0FBVyxFQUNYLHNCQUFzQixFQUN0QixVQUFVLEVBQ1YsVUFBVSxFQUNWLGdCQUFnQixFQUNoQixlQUFlLEVBQ2YsU0FBUyxFQUNULE9BQU8sRUFDUCxjQUFjLEVBQ2QsWUFBWSxFQUNaLFVBQVUsRUFDVixRQUFRLEVBQ1IsVUFBVSxFQUNWLFNBQVMsRUFDVCxjQUFjLEVBQ2QsUUFBUSxFQUNSLFFBQVEsRUFDUixZQUFZLEVBQ1osU0FBUyxFQUNULFNBQVMsRUFDVCxNQUFNLEVBQ04sYUFBYSxFQUNiLFNBQVMsRUFDVCw2QkFBNkIsRUFDN0IsUUFBUSxFQUNSLFNBQVMsRUFDVCwwQkFBMEIsRUFDMUIsTUFBTSxFQUNOLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsT0FBTyxFQUNQLGFBQWEsRUFDYixRQUFRLEVBQ1IsV0FBVyxFQUNYLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUNWLGNBQWMsRUFDZCxTQUFTLEVBQ1QsT0FBTyxDQUNSIn0=
